to update-friendship-impact ;Observer
  ask Users with [any? in-association-neighbors]
  [
  ifelse any? in-association-neighbors with [BatteryCapacity > 0]
  [ask friendship-neighbors [set Preference Preference * (1 + impact-on-friendships) if Preference > 1 [set Preference 1]]]  ;Users with an EV increase the Preference of their friends by impact-on-friendhsips factor
  [ask friendship-neighbors [set Preference Preference * (1 - impact-on-friendships / 10) if Preference < 0 [set Preference 0]]] ;Users without an EV decrease the Preference of their friends by 10% of imapct-on-friendships factor
  ]
end

to update-area-user-impact ;Observer
  ask Users with [any? in-association-neighbors with [BatteryCapacity > 0]][   ;Users with EVs
    ask in-area_connection-neighbors [
      let i [interval] of out-area_connection-to myself
      set Preference Preference * (1 + user-area-impact / i) 
      if Preference > 1 [set Preference 1]] ;and increasing Preference of people by user-area-impact but inversly proportionally to distance  
      ]
end



to update-yearly
  ask Users [set Income Income * EconGrow] ; update income for users
  set global_battery_price global_battery_price * (1 - battery_price_drop)
end

to update-monthly
 ask HHs [set HHAverage HHAverage * HHGrowMonthly set HHPeak HHFactor * HHAverage ] ; update power demand of households
 ask EVs [set CarAge CarAge + 1]
end

to-report coin-factor [NumberEVs]
  let a 0.1
  let b 0.6
  report (b + (1 - b)*(1 + exp(a))/(1 + exp(a * NumberEVs)))
end

to determine-used-capacity ;observer 
  ask Transformers with [level = "NHtransformer"]  ;ask highest level transformer
  [   
    ask in-power-line-neighbors  ;to ask LV transformers
    [
      let numTF 0 ;number of EVs connected to given LV transformer
      let HHPeakTF 0; peak capacity of all houses connected to LV transformer
      let EVPowerTF 0; power consumption of all EVs connected to LV transformer
      ask in-power-line-neighbors ;to ask their power lines
      [
        let numLV 0 ;number of EVs connected to given LV line
        let HHPeakLV sum [HHPeak] of in-power-line-neighbors
        let EVPowerLV 0;
        set Overcapacity Capacity - HHPeakLV ;calculate your overcapacity from households
        ask in-power-line-neighbors [set numLV numLV + count in-association-neighbors with [breed = EVs AND BatteryCapacity > 0] set EVPowerLV EVPowerLV + sum [EVPeak] of in-association-neighbors with [breed = EVs]]
        set numTF numTF + numLV
        if numLV > 0 
          [
            let LVCoin coin-factor numLV
            set Overcapacity Overcapacity - (LVCoin * EVPowerLV) ;decrease overcapacity based on impact from EVs
            set EVpowerTF EVpowerTF + EVPowerLV
          ]
       set HHPeakTF HHPeakTF + HHPeakLV ;calculate peak capacity of all households connected to this transformer   
      ]
      set Overcapacity Capacity - HHPeakTF ;calculate overcapacity from households
      if numTF > 0
      [
        let TFCoin coin-factor numTF 
        set Overcapacity Overcapacity - (TFCoin * EVPowerTF)
      ]
    ]
  set Overcapacity Capacity - sum [HHPeak] of HHs  
  if count EVs with [BatteryCapacity > 0] > 0
  [
    let NHCoin coin-factor count EVs with [BatteryCapacity > 0]
    set Overcapacity Overcapacity - NHCoin * (sum [EVPeak] of EVs) ;calculate overcapacity of the highest level transformer
    ]
  ]
  
  ask Transformers [ if Overcapacity < 0 [set color red]] ;if any fuse was blown, change color to red
end

to go-traveling
  let trip 0
  repeat 30 [
    ask users with [any? in-association-neighbors][
      ;; calc the commute trip 
      ifelse (random-float 1 < commute_probability)
      [
        set trip random-normal commute_average 5
        if (trip < 0) [set trip 0]]
      [
        set trip 0
        ]
      set trip_memory lput trip trip_memory ;; add the trip to the memory 
      
      ;; calculate the longer distance trip 
      ifelse (random-float 1 < long_dist_probability) 
      [
        set trip long_dist * random-gamma 1 1 ] ;; basically this gamma distribution comes down to being an exponential but I am not sure enough about that
      [
        set trip 0
      ]
      set trip_memory lput trip trip_memory ;; add the trip to the memory 
    ]
    ]
end

to cut-memory
  ask users with [any? in-association-neighbors] [
    if (length trip_memory > 720) [
      set trip_memory sublist trip_memory (length trip_memory - 720) (length trip_memory)
      ;;show length trip_memory ;; just to see how many items there are 
    ]]
end

to consider-buying-car
  ask users with [any? in-association-neighbors]
  [
    if any? in-association-neighbors with [CarOwnership = 0 AND CarAge + random-normal 0 3  > PrivateCarReplaceAge] ;ask those who own a private car
    [
    replace-car self
    ]
    if any? in-association-neighbors with [CarOwnership = 1 OR CarOwnership = 2 AND CarAge + random-normal 0 2  > NonPrivateCarReplaceAge] ;ask those who own a private car
    [
    replace-car self
    ] 
  ]
end

to replace-car [me] ;@user
  let base_price (0.85 * Income)
  let charge_power 10000 ;; from wikipedia charging_station 2-3 hours charging time 10kW.
  let batterysize best_battery(me)
  let ev_travel_cost travel_cost me batterysize
  let ic_travel_cost travel_cost me 0
  let tax_advantage calc_tax me base_price 
  let lifetime 1 ; simply to initialize the lifetime
  ifelse any? in-association-neighbors with [CarOwnership = 0] [
    set lifetime PrivateCarReplaceAge / 12]
  [
    set lifetime NonPrivateCarReplaceAge / 12]
  let Cost_ev base_price + ev_travel_cost * lifetime - tax_advantage 
  let Cost_ic base_price + ic_travel_cost * lifetime 
  let carown first  [CarOwnership] of [in-association-neighbors] of me
  ifelse preference_to_cost([Preference] of me) * Cost_ev < Cost_ic[ 
    ask [in-association-neighbors] of me [die] ;; kill the old car
     hatch-EVs 1 [
       set CarOwnership carown
       ifelse CarOwnership = 0 [set color cyan][ ifelse CarOwnership = 1 [set color magenta] [set color violet ]]
       set ycor ycor - 3 create-association-to me create-associations-to [out-link-neighbors] of me
       set CarAge 0
       set BatteryCapacity batterysize
       set EVPeak charge_power * ev_coincidence batterysize
       ]
      
  ][
  ask [in-association-neighbors] of me [die] ;; kill the old car
   hatch-EVs 1 [ 
       set CarOwnership carown
       ifelse CarOwnership = 0 [set color cyan][ ifelse CarOwnership = 1 [set color magenta] [set color violet ]]
       set ycor ycor - 3 create-association-to me create-associations-to [out-link-neighbors] of me
       set CarAge 0
       set BatteryCapacity 0
       set EVPeak 0
       ]
   ]
end

to-report preference_to_cost [pref]
  let a 4
  report 1.3 - (0.4 * (1 + exp(- a))/(1 + exp(- a * pref)))
end

to-report ev_coincidence [batterycap]
  let b 0.4
  let a 0.1
  report (b + (1 - b) * ((1) /(1 + exp(- a * batterycap))))
end

to-report best_battery [me]
  let bat 5
  let cost_old travel_cost me bat
  let cost_new cost_old
  while [cost_new <= cost_old][
    set cost_old cost_new 
    set bat bat + 5
    set cost_new travel_cost me bat
  ]
  report (bat - 5)
end

to-report travel_cost[me  bat]
  let cost 0 
  let el_price 0.2 ;; here is a charge at home variable missing
  let Price_gas 1.5 ;; just a guess of 1.5 euro per liter of 
  let el_distance 0
  let battery_price global_battery_price
  let trip_aux sublist trip_memory (length trip_memory - 360) (length trip_memory)
  foreach [trip_aux] of me [
    set el_distance (bat / 0.2 ) ;; calculates the distance traveled electrically
    if el_distance > ? [set el_distance ?]
    set cost cost + (? - el_distance) * 0.06 * Price_gas + el_distance * 0.2 * el_price
  ]
  set cost (cost / length trip_aux) * 720 ;; normalize on to one year
  report cost + battery_price * bat
end
to-report calc_tax [me base_price]
  report tax_global ;; for now just return 4000 euro tax advantage
end 