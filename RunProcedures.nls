to update-friendship-impact ;Observer
  ask Users with [not any? in-association-neighbors][ask friendship-neighbors [set Preference Preference * (1 - impact-on-friendships / 10) if Preference < 0 [set Preference 0]]]
  ;Users without an EV decrease the Preference of their friends by 10% of imapct-on-friendships factor
  ask Users with [any? in-association-neighbors][ask friendship-neighbors [set Preference Preference * (1 + impact-on-friendships) if Preference > 1 [set Preference 1]]]
  ;Users with an EV increase the Preference of their friends by impact-on-friendhsips factor
end

to update-area-user-impact ;Observer
  ask Users with [any? in-association-neighbors][   ;Users with EVs
    let i 0
    while [i <= size-of-area-influence / 6][ ;affect all other users within size-of-area-influence radius
      ask other Users in-radius (6 * i) with [distance myself > (6 * (i - 1))][ ;dividing this area into rings of 6 wide
          set Preference Preference * (1 + user-area-impact / i) if Preference > 1 [set Preference 1]] ;and increasing Preference of people by user-area-impact but inversly proportionally to distance
      set i i + 1     
      ]
  ]
end



to update-yearly
  ask Users [set Income Income * EconGrow] ; update income for users
end

to update-monthly
 ask HHs [set HHAverage HHAverage * HHGrowMonthly set HHPeak HHFactor * HHAverage ] ; update power demand of households
end

to-report coin-factor [NumberEVs]
  let a 0.1
  let b 0.6
  report (b + (1 - b)*(1 + exp(a))/(1 + exp(a * NumberEVs)))
end

to determine-used-capacity ;observer 
  ask Transformers with [level = "NHtransformer"]  ;ask highest level transformer
  [   
    ask in-power-line-neighbors  ;to ask LV transformers
    [
      let numTF 0 ;number of EVs connected to given LV transformer
      let HHPeakTF 0; peak capacity of all houses connected to LV transformer
      let EVPowerTF 0; power consumption of all EVs connected to LV transformer
      ask in-power-line-neighbors ;to ask their power lines
      [
        let numLV 0 ;number of EVs connected to given LV line
        let HHPeakLV sum [HHPeak] of in-power-line-neighbors
        let EVPowerLV 0;
        set Overcapacity Capacity - HHPeakLV ;calculate your overcapacity from households
        ask in-power-line-neighbors [set numLV numLV + count in-association-neighbors with [breed = EVs AND BatteryCapacity > 0] set EVPowerLV EVPowerLV + sum [EVPeak] of in-association-neighbors with [breed = EVs]]
        set numTF numTF + numLV
        if numLV > 0 
          [
            show [who] of self
            let LVCoin coin-factor numLV
            set Overcapacity Overcapacity - (LVCoin * EVPowerLV) ;decrease overcapacity based on impact from EVs
            set EVpowerTF EVpowerTF + EVPowerLV
          ]
       set HHPeakTF HHPeakTF + HHPeakLV ;calculate peak capacity of all households connected to this transformer   
      ]
      set Overcapacity Capacity - HHPeakTF ;calculate overcapacity from households
      if numTF > 0
      [
        let TFCoin coin-factor numTF 
        set Overcapacity Overcapacity - (TFCoin * EVPowerTF)
      ]
    ]
  set Overcapacity Capacity - sum [HHPeak] of HHs  
  if count EVs with [BatteryCapacity > 0] > 0
  [
    let NHCoin coin-factor count EVs with [BatteryCapacity > 0]
    set Overcapacity Overcapacity - NHCoin * (sum [EVPeak] of EVs) ;calculate overcapacity of the highest level transformer
    ]
  ]
  
  ask Transformers [ if Overcapacity < 0 [set color red]] ;if any fuse was blown, change color to red
end